{"ast":null,"code":"import { getRndInteger, shuffleArray } from '../utils/utils.js';\n\nconst generateCandidatesSum = result => {\n  const candidates = new Set();\n  candidates.add(result);\n  candidates.add(-result);\n\n  do {\n    candidates.add(getRndInteger(-5, 5));\n  } while (candidates.size < 4);\n\n  const candidatesArray = [...candidates];\n  shuffleArray(candidatesArray);\n  return candidatesArray;\n};\n\nconst generateCandidatesMultiplication = result => {\n  const candidates = new Set();\n  candidates.add(result);\n  candidates.add(-result);\n\n  do {\n    candidates.add(getRndInteger(-20, 21));\n  } while (candidates.size < 4);\n\n  const candidatesArray = [...candidates];\n  shuffleArray(candidatesArray);\n  return candidatesArray;\n};\n\nconst taskReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    numbers: [0, 0],\n    operation: \"SUM\",\n    candidates: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_RANDOM_VALUES':\n      const numbers = [getRndInteger(action.min, action.max), getRndInteger(action.min, action.max)];\n      let answer = 0;\n      let candidates = [];\n\n      if (action.operation === \"SUM\") {\n        answer = numbers[0] + numbers[1];\n        candidates = generateCandidatesSum(answer);\n      } else if (action.operation === \"MULTIPLICATION\") {\n        answer = numbers[0] * numbers[1];\n        candidates = generateCandidatesMultiplication(answer);\n      }\n\n      return {\n        numbers,\n        operation: action.operation,\n        answer,\n        candidates\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const generateNumbers = (min, max, operation) => {\n  return {\n    type: 'SET_RANDOM_VALUES',\n    min,\n    max,\n    operation\n  };\n};\nexport default taskReducer;","map":{"version":3,"sources":["/usr/src/app/src/reducers/taskReducer.js"],"names":["getRndInteger","shuffleArray","generateCandidatesSum","result","candidates","Set","add","size","candidatesArray","generateCandidatesMultiplication","taskReducer","state","numbers","operation","action","type","min","max","answer","generateNumbers"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,YAAxB,QAA4C,mBAA5C;;AAGA,MAAMC,qBAAqB,GAAIC,MAAD,IAAY;AACxC,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACAD,EAAAA,UAAU,CAACE,GAAX,CAAeH,MAAf;AAGAC,EAAAA,UAAU,CAACE,GAAX,CAAe,CAACH,MAAhB;;AAGA,KAAG;AACDC,IAAAA,UAAU,CAACE,GAAX,CAAeN,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAA5B;AACD,GAFD,QAESI,UAAU,CAACG,IAAX,GAAkB,CAF3B;;AAIA,QAAMC,eAAe,GAAG,CAAC,GAAGJ,UAAJ,CAAxB;AACAH,EAAAA,YAAY,CAACO,eAAD,CAAZ;AACA,SAAOA,eAAP;AACD,CAfD;;AAiBA,MAAMC,gCAAgC,GAAIN,MAAD,IAAY;AACnD,QAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACAD,EAAAA,UAAU,CAACE,GAAX,CAAeH,MAAf;AACAC,EAAAA,UAAU,CAACE,GAAX,CAAe,CAACH,MAAhB;;AAEA,KAAG;AACDC,IAAAA,UAAU,CAACE,GAAX,CAAeN,aAAa,CAAC,CAAC,EAAF,EAAM,EAAN,CAA5B;AACD,GAFD,QAESI,UAAU,CAACG,IAAX,GAAkB,CAF3B;;AAIA,QAAMC,eAAe,GAAG,CAAC,GAAGJ,UAAJ,CAAxB;AACAH,EAAAA,YAAY,CAACO,eAAD,CAAZ;AACA,SAAOA,eAAP;AACD,CAZD;;AAeA,MAAME,WAAW,GAAG,YAA2E;AAAA,MAA1EC,KAA0E,uEAAlE;AAAEC,IAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAX;AAAmBC,IAAAA,SAAS,EAAE,KAA9B;AAAqCT,IAAAA,UAAU,EAAE;AAAjD,GAAkE;AAAA,MAAXU,MAAW;;AAC7F,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,YAAMH,OAAO,GAAG,CAACZ,aAAa,CAACc,MAAM,CAACE,GAAR,EAAaF,MAAM,CAACG,GAApB,CAAd,EAAwCjB,aAAa,CAACc,MAAM,CAACE,GAAR,EAAaF,MAAM,CAACG,GAApB,CAArD,CAAhB;AACA,UAAIC,MAAM,GAAG,CAAb;AACA,UAAId,UAAU,GAAG,EAAjB;;AAEA,UAAIU,MAAM,CAACD,SAAP,KAAqB,KAAzB,EAAgC;AAC9BK,QAAAA,MAAM,GAAGN,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAA7B;AACAR,QAAAA,UAAU,GAAGF,qBAAqB,CAACgB,MAAD,CAAlC;AACD,OAHD,MAGO,IAAIJ,MAAM,CAACD,SAAP,KAAqB,gBAAzB,EAA2C;AAChDK,QAAAA,MAAM,GAAGN,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAA7B;AACAR,QAAAA,UAAU,GAAGK,gCAAgC,CAACS,MAAD,CAA7C;AACD;;AAED,aAAO;AACLN,QAAAA,OADK;AAELC,QAAAA,SAAS,EAAEC,MAAM,CAACD,SAFb;AAGLK,QAAAA,MAHK;AAILd,QAAAA;AAJK,OAAP;;AAOF;AACE,aAAOO,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,OAAO,MAAMQ,eAAe,GAAG,CAACH,GAAD,EAAMC,GAAN,EAAWJ,SAAX,KAAyB;AACtD,SAAO;AACLE,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,GAFK;AAGLC,IAAAA,GAHK;AAILJ,IAAAA;AAJK,GAAP;AAMD,CAPM;AAUP,eAAeH,WAAf","sourcesContent":["import { getRndInteger, shuffleArray } from '../utils/utils.js'\n\n\nconst generateCandidatesSum = (result) => {\n  const candidates = new Set()\n  candidates.add(result)\n\n\n  candidates.add(-result)\n\n\n  do {\n    candidates.add(getRndInteger(-5, 5))\n  } while (candidates.size < 4)\n\n  const candidatesArray = [...candidates]\n  shuffleArray(candidatesArray)\n  return candidatesArray\n}\n\nconst generateCandidatesMultiplication = (result) => {\n  const candidates = new Set()\n  candidates.add(result)\n  candidates.add(-result)\n\n  do {\n    candidates.add(getRndInteger(-20, 21))\n  } while (candidates.size < 4)\n\n  const candidatesArray = [...candidates]\n  shuffleArray(candidatesArray)\n  return candidatesArray\n}\n\n\nconst taskReducer = (state = { numbers: [0, 0], operation: \"SUM\", candidates: [] }, action) => {\n  switch (action.type) {\n    case 'SET_RANDOM_VALUES':\n      const numbers = [getRndInteger(action.min, action.max), getRndInteger(action.min, action.max)]\n      let answer = 0\n      let candidates = []\n\n      if (action.operation === \"SUM\") {\n        answer = numbers[0] + numbers[1]\n        candidates = generateCandidatesSum(answer)\n      } else if (action.operation === \"MULTIPLICATION\") {\n        answer = numbers[0] * numbers[1]\n        candidates = generateCandidatesMultiplication(answer)\n      }\n\n      return {\n        numbers,\n        operation: action.operation,\n        answer,\n        candidates\n      }\n\n    default:\n      return state\n  }\n}\n\nexport const generateNumbers = (min, max, operation) => {\n  return {\n    type: 'SET_RANDOM_VALUES',\n    min,\n    max,\n    operation\n  }\n}\n\n\nexport default taskReducer"]},"metadata":{},"sourceType":"module"}