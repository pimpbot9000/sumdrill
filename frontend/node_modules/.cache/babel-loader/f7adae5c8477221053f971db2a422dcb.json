{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countdown = /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    onTimeout\n  } = _ref;\n  const [time, setTime] = useState(100);\n  const [pause, setPause] = useState(true);\n\n  const resetTime = () => {\n    setTime(100);\n    pauseTimer();\n  };\n\n  React.useImperativeHandle(ref, () => {\n    return {\n      resetTime,\n      startGame\n    };\n  });\n\n  const startGame = () => {\n    setPause(false);\n  };\n\n  const pauseTimer = () => {\n    setPause(true);\n    setTimeout(() => {\n      setPause(false);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      if (time <= 0) {\n        setTime(100);\n        onTimeout();\n        pauseTimer();\n      } else {\n        if (!pause) setTime(time - 1);\n      }\n    }, 100);\n    return () => clearTimeout(timeOut);\n  });\n  return /*#__PURE__*/_jsxDEV(ProgressBar, {\n    now: time,\n    label: `${time}%`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}, \"kHSb8f70NoWW0CH1Qr1joFg3bUA=\", false, function () {\n  return [React.useImperativeHandle];\n}));\n_c2 = Countdown;\nexport default Countdown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countdown$React.forwardRef\");\n$RefreshReg$(_c2, \"Countdown\");","map":{"version":3,"sources":["/usr/src/app/src/components/Countdown.tsx"],"names":["React","useEffect","useState","ProgressBar","Countdown","forwardRef","ref","onTimeout","time","setTime","pause","setPause","resetTime","pauseTimer","useImperativeHandle","startGame","setTimeout","timeOut","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;AAMA,MAAMC,SAAS,gBAAGJ,KAAK,CAACK,UAAN,SAAiB,OAAuBC,GAAvB,KAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA;AAAF,GAA8B;AAChE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,GAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMU,SAAS,GAAG,MAAM;AACtBH,IAAAA,OAAO,CAAC,GAAD,CAAP;AACAI,IAAAA,UAAU;AACX,GAHD;;AAKAb,EAAAA,KAAK,CAACc,mBAAN,CAA0BR,GAA1B,EAA+B,MAAM;AACnC,WAAO;AACLM,MAAAA,SADK;AAELG,MAAAA;AAFK,KAAP;AAID,GALD;;AAOA,QAAMA,SAAS,GAAE,MAAM;AACrBJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAME,UAAU,GAAG,MAAM;AACvBF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAK,IAAAA,UAAU,CAAC,MAAM;AACfL,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAFS,EAGN,IAHM,CAAV;AAID,GAND;;AAQAV,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMgB,OAAO,GAAGD,UAAU,CAAC,MAAM;AAC/B,UAAIR,IAAI,IAAI,CAAZ,EAAe;AACbC,QAAAA,OAAO,CAAC,GAAD,CAAP;AACAF,QAAAA,SAAS;AACTM,QAAAA,UAAU;AACX,OAJD,MAIO;AACL,YAAI,CAACH,KAAL,EAAYD,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACb;AACF,KARyB,EAQvB,GARuB,CAA1B;AASA,WAAO,MAAMU,YAAY,CAACD,OAAD,CAAzB;AACD,GAZQ,CAAT;AAcA,sBAAO,QAAC,WAAD;AAAa,IAAA,GAAG,EAAET,IAAlB;AAAwB,IAAA,KAAK,EAAG,GAAEA,IAAK;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA3CiB;AAAA,UAShBR,KAAK,CAACc,mBATU;AAAA,GAAlB;MAAMV,S;AA6CN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\ntype Props = {\n  onTimeout: () => void\n}\n\nconst Countdown = React.forwardRef(({ onTimeout }: Props, ref) => {\n  const [time, setTime] = useState(100)\n  const [pause, setPause] = useState(true)\n\n  const resetTime = () => {\n    setTime(100)\n    pauseTimer()\n  }\n\n  React.useImperativeHandle(ref, () => {\n    return {\n      resetTime,\n      startGame\n    }\n  })  \n\n  const startGame =() => {\n    setPause(false)\n  }\n\n  const pauseTimer = () => {\n    setPause(true)\n    setTimeout(() => {\n      setPause(false)\n    }\n      , 1000)\n  }\n\n  useEffect(() => {\n\n    const timeOut = setTimeout(() => {\n      if (time <= 0) {\n        setTime(100)\n        onTimeout()\n        pauseTimer()\n      } else {\n        if (!pause) setTime(time - 1)\n      }\n    }, 100);\n    return () => clearTimeout(timeOut)\n  })\n\n  return <ProgressBar now={time} label={`${time}%`} />\n})\n\nexport default Countdown"]},"metadata":{},"sourceType":"module"}