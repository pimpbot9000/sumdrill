{"ast":null,"code":"import scoresService from \"../services/scores\";\n\nconst scoresReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    topScores: [],\n    lowestScore: 0\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'NEW_SCORE':\n      const topScores = [...state.topScores, action.data];\n      topScores.sort((a, b) => b.score - a.score);\n      const lowestScore = topScores[topScores.length - 1].score;\n      const res = {\n        topScores: topScores.slice(0, 10),\n        lowestScore\n      };\n      return res;\n\n    case 'INIT_SCORES':\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport const initializeScores = () => {\n  return async dispatch => {\n    const scores = await scoresService.getAll();\n    scores.sort((a, b) => b.score - a.score);\n    const topScores = scores.slice(0, 10);\n    const lowestScore = scores.length === 0 ? 0 : scores[topScores.length - 1].score;\n    dispatch({\n      type: 'INIT_SCORES',\n      data: {\n        topScores,\n        lowestScore\n      }\n    });\n  };\n};\nexport const newScore = (name, score) => {\n  return async dispatch => {\n    const result = await scoresService.createNew({\n      name,\n      score\n    });\n    dispatch({\n      type: 'NEW_SCORE',\n      data: result\n    });\n  };\n};\nexport default scoresReducer;","map":{"version":3,"sources":["/usr/src/app/src/reducers/scoresReducer.js"],"names":["scoresService","scoresReducer","state","topScores","lowestScore","action","type","data","sort","a","b","score","length","res","slice","initializeScores","dispatch","scores","getAll","newScore","name","result","createNew"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;;AAEA,MAAMC,aAAa,GAAG,YAAqD;AAAA,MAApDC,KAAoD,uEAA5C;AAACC,IAAAA,SAAS,EAAE,EAAZ;AAAgBC,IAAAA,WAAW,EAAE;AAA7B,GAA4C;AAAA,MAAXC,MAAW;;AACvE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,YAAMH,SAAS,GAAG,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBE,MAAM,CAACE,IAA5B,CAAlB;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAArC;AACA,YAAMP,WAAW,GAAGD,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAT,CAAgCD,KAApD;AACA,YAAME,GAAG,GAAG;AACRV,QAAAA,SAAS,EAAEA,SAAS,CAACW,KAAV,CAAgB,CAAhB,EAAkB,EAAlB,CADH;AAERV,QAAAA;AAFQ,OAAZ;AAIA,aAAOS,GAAP;;AACJ,SAAK,aAAL;AACI,aAAOR,MAAM,CAACE,IAAd;;AACJ;AACI,aAAOL,KAAP;AAbR;AAeH,CAhBD;;AAkBA,OAAO,MAAMa,gBAAgB,GAAG,MAAM;AAClC,SAAO,MAAMC,QAAN,IAAkB;AACrB,UAAMC,MAAM,GAAG,MAAMjB,aAAa,CAACkB,MAAd,EAArB;AACAD,IAAAA,MAAM,CAACT,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAlC;AACA,UAAMR,SAAS,GAAGc,MAAM,CAACH,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAlB;AAEA,UAAMV,WAAW,GAAGa,MAAM,CAACL,MAAP,KAAkB,CAAlB,GAAqB,CAArB,GAAyBK,MAAM,CAACd,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAN,CAA6BD,KAA1E;AAEAK,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,aADD;AAELC,MAAAA,IAAI,EAAE;AACFJ,QAAAA,SADE;AAEFC,QAAAA;AAFE;AAFD,KAAD,CAAR;AAOH,GAdD;AAeH,CAhBM;AAkBP,OAAO,MAAMe,QAAQ,GAAG,CAACC,IAAD,EAAOT,KAAP,KAAiB;AAErC,SAAO,MAAMK,QAAN,IAAkB;AACrB,UAAMK,MAAM,GAAG,MAAMrB,aAAa,CAACsB,SAAd,CAAwB;AAAEF,MAAAA,IAAF;AAAQT,MAAAA;AAAR,KAAxB,CAArB;AAEAK,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,WADD;AAELC,MAAAA,IAAI,EAAEc;AAFD,KAAD,CAAR;AAIH,GAPD;AAQH,CAVM;AAcP,eAAepB,aAAf","sourcesContent":["import scoresService from \"../services/scores\"\n\nconst scoresReducer = (state = {topScores: [], lowestScore: 0}, action) => {\n    switch (action.type) {\n        case 'NEW_SCORE':\n            const topScores = [...state.topScores, action.data]\n            topScores.sort((a, b) => b.score - a.score)\n            const lowestScore = topScores[topScores.length - 1].score\n            const res = {\n                topScores: topScores.slice(0,10),\n                lowestScore\n            }\n            return res\n        case 'INIT_SCORES':\n            return action.data\n        default:\n            return state\n    }\n}\n\nexport const initializeScores = () => {\n    return async dispatch => {\n        const scores = await scoresService.getAll()\n        scores.sort((a, b) => b.score - a.score)\n        const topScores = scores.slice(0, 10)\n\n        const lowestScore = scores.length === 0? 0 : scores[topScores.length - 1].score\n\n        dispatch({\n            type: 'INIT_SCORES',\n            data: {\n                topScores,\n                lowestScore\n            }\n        })\n    }\n}\n\nexport const newScore = (name, score) => {\n\n    return async dispatch => {\n        const result = await scoresService.createNew({ name, score })\n\n        dispatch({\n            type: 'NEW_SCORE',\n            data: result\n        })\n    }\n}\n\n\n\nexport default scoresReducer"]},"metadata":{},"sourceType":"module"}